global
  # maximum number of simultaneous active connections from an upstream web server
  maxconn <%= @maxconn %>

  log   <%= @syslog_host %>   <%= @syslog_facility %>   <%= @log_level %>

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  #debug

  # enable stats socket, for enabling/disabling servers
  stats socket /var/run/haproxy.stat mode 600 level admin

  <%= @globals.join("\n") unless @globals.empty? %>

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Distribute incoming requests between Mongrels by connection count
  balance leastconn

  # Maximum number of simultaneous active connections from an upstream web server 
  # per service
  maxconn <%= @maxconn_service %>

  # Log details about odd HTTP requests
  option httplog
  option log-separate-errors

  # Abort request if client closes its output channel while waiting for the 
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # Enable insertion of the X-Forwarded-For header to requests sent to servers
  option forwardfor

  # Check if a "Connection: close" header is already set in each direction,
  # and will add one if missing.
  option forceclose
  option httpclose

  timeout client <%= @client_timeout %>

  timeout connect <%= @connect_timeout %>

  timeout server <%= @server_timeout %>

  timeout check <%= @check_timeout %>
<% unless @http_request_timeout.empty? %>
  timeout http-request <%= @http_request_timeout %>
<% end %>

  # Remove the server from the farm gracefully if the health check URI returns
  # a 404. This is useful for rolling restarts.
  option httpchk
  http-check disable-on-404

  # Balance requests between all backup servers instead of using only the first one.
  option allbackups

  # Error pages to display instead of the defaults if configured.
  # TODO: error pages

  # Enable the statistics page 
  stats enable
  stats uri     /haproxy?stats
<% unless @stats_auth.empty? %>
  stats auth <%= @stats_auth %>
<% end %>

  # Create a monitorable URI which returns a 200 if haproxy is up
  monitor-uri /haproxy-monitor

  <%= @defaults.join("\n") unless @defaults.empty? %>

<% @backends.each do |backend| -%>
backend <%= backend['backend_name'] %>
  <%= "balance #{backend['balance']}" if backend['balance'] %>
  <%= backend['options'].join("\n") if backend['options'] %>
  <% backend['servers'].each do |server| -%>
  server <%= server['server_name'] %> <%= server['settings'] %>
  <% end -%>
<% end -%>

<% @frontends.each do |frontend| -%>
frontend <%= frontend['frontend_name'] %>
  bind <%= "#{frontend['bind_ip']}:#{frontend['bind_port']}" %>
  capture request header Host len 15
  mode http
  option httplog
  log global

  default_backend <%= frontend['default_backend'] %>
<% end -%>
